{"version":3,"sources":["services/Synth.js","components/PianoKey.js","components/PianoKeyboard.js","components/Jumbotron.js","components/WithMidiConnection.js","App.js","serviceWorker.js","index.js"],"names":["synth","PolySynth","toMaster","PianoKey","props","active","activeKeys","includes","note","backgroundColorStyle","backgroundColor","useEffect","triggerAttackRelease","triggerRelease","console","log","className","keyColor","style","PianoKeyboard","useState","setActiveKeys","lowestNote","highestNote","blackKeys","Array","fill","undefined","map","item","index","Tonal","fromMidi","key","replace","Jumbotron","WithMidiConnection","onMIDIMessage","message","data","newState","push","activateKey","filter","deactivateKey","navigator","requestMIDIAccess","then","midi","inputs","values","onstatechange","e","port","state","name","manufacturer","error","input","next","done","value","onmidimessage","React","Children","children","child","cloneElement","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.208d102a.chunk.js","sourcesContent":["import { PolySynth } from 'tone';\n\nconst synth = new PolySynth({\n    \"oscillator\": {\n        \"type\": \"amtriangle\",\n        \"harmonicity\": 0.5,\n        \"modulationType\": \"sine\"\n    },\n    \"envelope\": {\n        \"attackCurve\": \"exponential\",\n        \"attack\": 0.05,\n        \"decay\": 0.2,\n        \"sustain\": 0.2,\n        \"release\": 1.5,\n    },\n    \"portamento\": 0.05\n}).toMaster();\n\nexport default synth;","import React, { useEffect } from \"react\";\nimport \"../styles/PianoKey.css\";\nimport synth from '../services/Synth';\n\nfunction PianoKey ( props ) {\n\n    const active = props.activeKeys.includes(props.note);\n    const backgroundColorStyle = { backgroundColor: active ? 'red' : '' };\n\n    useEffect( () => {\n        active ?\n           synth.triggerAttackRelease(props.note)\n            : synth.triggerRelease(props.note);\n\n        active ?\n            console.log(props.note + ' attack')\n            : console.log(props.note + ' release');\n\n    }, [active]);\n\n    return (\n        <div className={`key ${ props.keyColor }`} style={ backgroundColorStyle }/>\n    );\n}\n\nexport default PianoKey;\n","import React, { useState, useEffect } from \"react\";\nimport * as Tonal from \"tonal\"\n\nimport \"../styles/PianoKeyboard.css\";\n\nimport Key from \"./PianoKey\";\n\nfunction PianoKeyboard ( props ) {\n\n    const [activeKeys, setActiveKeys] = useState(props.activeKeys);\n\n    useEffect( () => {\n        setActiveKeys(props.activeKeys);\n    }, [props.activeKeys]);\n\n    // TODO: Feed in through props after setup wizard\n    let lowestNote = 48, highestNote = 72;\n\n    let blackKeys = ['Db', 'Eb', 'Gb', 'Ab', 'Bb'];\n\n    /*\n     * Generates a collection of PianoKey components representing\n     * the connected midi keyboard from the provided lowest and highest notes\n     */\n    function generateKeys() {\n\n        let keyboard = new Array(\n            ( highestNote - lowestNote ) + 1)\n            .fill(undefined)\n            .map((item, index) =>\n\n                /*\n                 * convert midi note to musical notation\n                 * ex: 48 -> C3\n                 */\n                Tonal.Note.fromMidi(lowestNote + index)\n            );\n\n        return keyboard.map(( note ) => {\n            return <Key key={note}\n                        note={note}\n                        activeKeys={activeKeys}\n                        keyColor={\n                            blackKeys.includes(\n\n                                /*\n                                 * strip octave number\n                                 * ex: C3 -> C\n                                 */\n                                note.replace(/[0-9]/g, '')\n                            ) ? 'blackKey' : 'whiteKey'\n                        }\n                    />\n        });\n    }\n\n    return (\n        <div className=\"keyboard\">\n            { generateKeys() }\n        </div>\n    )\n}\n\nexport default PianoKeyboard;\n","import React, { useState, useEffect } from 'react';\nimport { chord } from 'tonal-detect';\nimport '../styles/Jumbotron.css';\n\nfunction Jumbotron( props ) {\n\n    const [activeKeys, setActiveKeys] = useState(props.activeKeys);\n\n    useEffect( () => {\n        setActiveKeys(props.activeKeys);\n    }, [props.activeKeys]);\n\n    function stripOctaveNumbers( activeKeys ) {\n        let formattedKeys = activeKeys.map( note => note.replace(/[0-9]/g, ''));\n        return formattedKeys;\n    }\n\n    return (\n        <div className='jumbotron'>\n            {/* chord(stripOctaveNumbers(activeKeys)).join(' ') */}\n        </div>\n    )\n}\n\nexport default Jumbotron;\n","import React, { useState, useEffect } from 'react';\nimport * as Tonal from 'tonal';\n\nfunction WithMidiConnection ( props ) {\n\n    const [activeKeys, setActiveKeys] = useState([]);\n\n    const activateKey = key => {\n        let newState = [...activeKeys];\n        newState.push(key);\n        setActiveKeys(newState);\n    }\n\n    const deactivateKey = key => {\n        let newState = [...activeKeys];\n        newState = newState.filter(item => key != item);\n        setActiveKeys(newState);\n    }\n\n    const onMIDIMessage = message => {\n\n        let note = Tonal.Note.fromMidi(message.data[1]);\n\n        // key on\n        if (message.data[0] === 144 && message.data[2] > 0) {\n            activateKey(note);\n        }\n\n        // key off\n        if (message.data[0] === 128 || message.data[2] === 0) {\n            deactivateKey(note)\n        }\n    }\n\n    // TODO: Gracefully connect to keyboard that's been connected since before initial render\n    function detectAndConnect () {\n\n        if (navigator.requestMIDIAccess) {\n            navigator.requestMIDIAccess()\n                .then(success, failure);\n        }\n\n        function success (midi) {\n\n\n            // Get lists of available MIDI controllers\n            const inputs = midi.inputs.values();\n            // const outputs = midi.outputs.values();\n\n            midi.onstatechange = function(e) {\n\n                if (e.port.state === 'connected') {\n                    console.log(e.port.name, e.port.manufacturer, e.port.state);\n                } else {\n                    console.error('No access to your midi devices.');\n                }\n\n                for (let input = inputs.next(); input && !input.done; input = inputs.next()) {\n                    // each time there is a midi message call the onMIDIMessage function\n                    input.value.onmidimessage = onMIDIMessage;\n                }\n            }\n            return true;\n        }\n\n        function failure () {\n            console.error('No access to your midi devices.');\n            return false;\n        }\n        return null;\n    }\n\n    useEffect(() => {\n        detectAndConnect();\n    });\n\n    return (\n        <div>\n            {   /* Iterate over arbitrary children, passing the state.activeKeys as a prop to each one */\n                React.Children.map(props.children, function (child) {\n                    return React.cloneElement(child, { activeKeys: activeKeys });\n                })\n            }\n        </div>\n    );\n}\n\nexport default WithMidiConnection;\n","import React from 'react';\nimport './App.css';\n\nimport PianoKeyboard from \"./components/PianoKeyboard\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport WithMidiConnection from \"./components/WithMidiConnection\";\n\nfunction App() {\n\n  return (\n      <div className=\"App\">\n\n          { /* Wrap piano and jumbotron in order to propagate midi events to them */ }\n          <WithMidiConnection>\n              <PianoKeyboard/>\n              <Jumbotron/>\n          </WithMidiConnection>\n      </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}