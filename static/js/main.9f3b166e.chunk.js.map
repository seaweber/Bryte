{"version":3,"sources":["components/BlackKey.js","components/WhiteKey.js","components/PianoKeyboard.js","App.js","serviceWorker.js","index.js"],"names":["BlackKey","props","className","WhiteKey","PianoKeyboard","useState","octave","level","blackKeys","midiRoot","currentNote","notes","index","includes","push","map","note","octaves","Number","parseInt","keys","generateKeys","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAaeA,MAVf,SAAoBC,GAEhB,OACI,yBAAKC,UAAU,cCURC,MAZf,SAAoBF,GAEhB,OAEI,yBAAKC,UAAU,cCoERE,MApEf,SAAyBH,GAAS,IAAD,EAEHI,mBAAS,GAFN,mBAO7B,SAASC,EAASC,GAYd,IATA,IAAMC,EAAY,CAAC,EAAG,EAAG,EAAG,EAAG,IAGzBC,EAAmB,GAARF,EACbG,EAAcD,EAEdE,EAAQ,GAGFC,EAAQ,GAAIA,EAAQ,EAAGA,IAM7BJ,EAAUK,SAASH,EAAcD,GAC7BE,EAAMG,KAAK,GAAKH,EAAMG,KAAK,GAC/BJ,IAIJ,OAAOC,EAAMI,KAAK,SAAEC,GAChB,OAAgB,IAATA,EACD,kBAAC,EAAD,MACA,kBAAC,EAAD,SA2Bd,OA7D6B,UA8DzB,yBAAKd,UAAU,YArBnB,WAWI,IALA,IAAIe,GAAYC,OAAOC,SAASlB,EAAMmB,MAAQ,GAAM,GAEhDT,EAAQ,GAGHC,EAAQ,EAAGA,GAASK,EAASL,IAClCD,EAAMG,KAAKR,EAAOM,IAKtB,OAFAD,EAAMG,KAAK,kBAAC,EAAD,OAEJH,EAKDU,KCvDCC,MAVf,WACE,OACE,yBAAKpB,UAAU,OAEX,kBAAC,EAAD,CAAekB,KAAK,SCERG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9f3b166e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"../styles/BlackKey.css\";\n\nfunction BlackKey ( props ) {\n\n    return (\n        <div className=\"blackKey\">\n\n        </div>\n    );\n\n}\n\nexport default BlackKey;","import React, { useState } from \"react\";\nimport \"../styles/WhiteKey.css\";\nimport BlackKey from \"./BlackKey\";\n\nfunction WhiteKey ( props ) {\n\n    return (\n\n        <div className=\"whiteKey\">\n\n        </div>\n\n    );\n\n}\n\nexport default WhiteKey;","import React, { useState, useLayoutEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../styles/PianoKeyboard.css\";\n\n\nimport WhiteKey from \"./WhiteKey\";\nimport BlackKey from \"./BlackKey\";\n\nfunction PianoKeyboard ( props ) {\n\n    const [width, setWidth] = useState(0);\n\n    /*\n     * Produces a collection of <Key> components to represent an octave\n     */\n    function octave ( level ) {\n\n        // position of black keys in an octave with root C\n        const blackKeys = [1, 3, 6, 8, 10];\n\n        // calculate midi code of requested octave's low C\n        const midiRoot = level * 12;\n        let currentNote = midiRoot;\n\n        let notes = [];\n\n        // iterate through the 12 'half steps' of an octave\n        for ( let index = 12; index > 0; index-- ) {\n\n            /*\n             * convert each midi code to its C1 (the lowest octave level) equivalent,\n             * and compare against blackKeys\n             */\n            blackKeys.includes(currentNote - midiRoot) ?\n                notes.push(1) : notes.push(0);\n            currentNote++;\n        }\n\n        // convert binary array to collection of <Key> components\n        return notes.map( ( note ) => {\n            return note === 0 ?\n                ( <WhiteKey/> ) :\n                ( <BlackKey/> )\n        });\n    }\n\n    /*\n     * Generates a collection of keys representing the connected midi keyboard\n     */\n    function generateKeys() {\n\n        /*\n         * By convention, keyboards contain, in order, 'n' octaves + 1 white key\n         * Calculate connected midi keyboard's number of octaves\n         */\n        let octaves = ( Number.parseInt(props.keys) - 1 ) / 12;\n\n        let notes = [];\n\n        // iterate through octaves, incrementing octave level\n        for (let index = 1; index <= octaves; index++) {\n            notes.push(octave(index));\n        }\n        // add extra white key\n        notes.push(<WhiteKey/>);\n\n        return notes;\n    }\n\n    return (\n        <div className=\"keyboard\">\n            { generateKeys() }\n        </div>\n    )\n}\n\nexport default PianoKeyboard;","import React from 'react';\nimport './App.css';\n\n\nimport PianoKeyboard from \"./components/PianoKeyboard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n        <PianoKeyboard keys=\"25\"/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}